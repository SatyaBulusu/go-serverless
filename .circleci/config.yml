# Scala CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/sample-config/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/tmp

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: Determine which projects have changed and trigger the builds
          command: |
            # Identify modified directories
            LAST_SUCCESSFUL_BUILD_URL="https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_NAME/tree/$CIRCLE_BRANCH?filter=completed&limit=1"
            LAST_SUCCESSFUL_COMMIT=`curl -Ss -u "$CIRCLE_TOKEN:" $LAST_SUCCESSFUL_BUILD_URL | jq -r '.[0]["vcs_revision"]'`

            #first commit in a branch
            if [[ ${LAST_SUCCESSFUL_COMMIT} == "null" ]]; then
              COMMITS="origin/master"
            else
              COMMITS="${CIRCLE_SHA1}..${LAST_SUCCESSFUL_COMMIT}"
            fi

            git diff --name-only $COMMITS | cut -d/ -f1 | sort -u > projects
            echo -e "Modified directories:\n`cat projects`\n"

            # If modified directories contain common directores, build all projects and exit
            buildall=0
            for project in `cat projects`; do
              if [[ ${project} =~ "common"]]; then
                buildall=1
                echo -e "Dependencies change detected. building all $CIRCLE_PROJECT_REPONAME"
                curl -s -u ${CIRCLE_TOKEN}: \
                    -d build_parameters[CIRCLE_JOB]=all \
                    https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
              if [[ ${buildall} -eq 1 ]]; then
                exit 0
              fi
            done

            # Build affected projects and their dependencies
            projects_inc_dep=(`cat projects`)
            echo -e "Calculating dependencies\n"
            for dir in `ls -d */`; do
              for dep in `go list -f '{{ .Deps }}' ./${dir} 2>/dev/null`; do
                for project_dep in `echo $dep | grep github.com/tufin/$CIRCLE_PROJECT_REPONAME | egrep -v "vendor|${dir%\/}"`; do
                  if [[ " ${projects_inc_dep[@]} " =~ " ${project_dep##*\/} " ]] && ! [[ " ${projects_inc_dep[@]} " =~ " ${dir%\/} " ]]; then
                    projects_inc_dep+=(${dir%\/})
                  fi
                done
              done
            done
            echo -e "Building: ${projects_inc_dep[@]}\n"
            for project in ${projects_inc_dep[@]}; do
              if grep -Fxq $project project-dirs; then
                printf "\nTriggerring build for project: "$project
                curl -s -u ${CIRCLE_TOKEN}: \
                  -d build_parameters[CIRCLE_JOB]=${project} \
                  https://circleci.com/api/v1.1/project/github/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/tree/$CIRCLE_BRANCH
              fi
            done
            
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies--{{ checksum "build.sbt" }}

      # run tests!
      - run: cat /dev/null | sbt test:test


multi1:
  working_directory: /tmp
  environment:
    PROJECT_NAME: multi1
    TEST_RESULTS: /tmp/test-results
  steps:
    - checkout
    - run:
        name: Build
        command: |
          sbt compile
    - run:
        name: Run Tests
        command: |
          cat /dev/null | sbt multi1/test
    - store_artifacts:
        path: /tmp/test-results
        destination: raw-test-output
    - store_test_results:
        path: /tmp/test-results
multi2:
  working_directory: /tmp
  environment:
    PROJECT_NAME: multi2
    TEST_RESULTS: /tmp/test-results
  steps:
    - checkout
    - run:
        name: Build
        command: |
          sbt compile
    - run:
        name: Run Tests
        command: |
          cat /dev/null | sbt multi2/test
    - store_artifacts:
        path: /tmp/test-results
        destination: raw-test-output
    - store_test_results:
        path: /tmp/test-results
